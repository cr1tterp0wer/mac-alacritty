# Configuration for Alacritty0.8.0, the GPU enhanced terminal emulator.

# Import additional configuration files
#
# Imports are loaded in order, skipping all missing files, with the importing
# file being loaded last. If a field is already present in a previous import, it
# will be replaced.
#
# All imports must either be absolute paths starting with `/`, or paths relative
# to the user's home directory starting with `~/`.
#import:
#  - /path/to/alacritty.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  TERM: 'xterm-256color'

window:
  dimensions:
    columns: 100
    lines: 30
  padding:
    x: 12
    y: 12

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true
  decorations: full
  decorations: buttonless
  startup_mode: Maximized
  title: Alacritty
  dynamic_title: true

scrolling:
  history: 10000

# Font configuration
font:
  normal:
    family: Hack Nerd Font
    style: Regular
  bold:
    family: Hack Nerd Font
  italic:
    family: Hack Nerd Font
    style: Italic

  bold_italic:
    family: Hack Nerd Font
    style: Bold Italic
  size: 18.0

  offset:
    x: 0
    y: 0
  glyph_offset:
    x: 0
    y: 0

  use_thin_strokes: true
draw_bold_text_with_bright_colors: true

# Colors (Tomorrow Night)
colors:
  primary:
    background: '#1d1f21'
    foreground: '#c5c8c6'
    dim_foreground: '#828482'
    bright_foreground: '#eaeaea'
    cursor:
    text: CellBackground
    cursor: CellForeground
  selection:
    text: CellBackground
    background: CellForeground

  # Normal colors
  normal:
    black:   '#1d1f21'
    red:     '#cc6666'
    green:   '#b5bd68'
    yellow:  '#f0c674'
    blue:    '#81a2be'
    magenta: '#b294bb'
    cyan:    '#8abeb7'
    white:   '#c5c8c6'

  # Bright colors
  bright:
    black:   '#666666'
    red:     '#d54e53'
    green:   '#b9ca4a'
    yellow:  '#e7c547'
    blue:    '#7aa6da'
    magenta: '#c397d8'
    cyan:    '#70c0b1'
    white:   '#eaeaea'

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  dim:
    black:   '#131415'
    red:     '#864343'
    green:   '#777c44'
    yellow:  '#9e824c'
    blue:    '#556a7d'
    magenta: '#75617b'
    cyan:    '#5b7d78'
    white:   '#828482'
bell:
  animation: EaseOutExpo
  duration: 1
  color: '#fafafa'

# Background opacity
background_opacity: 0.92

#selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  #save_to_clipboard: false
selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  save_to_clipboard: true

# Live config reload (changes require restart)
live_config_reload: true

cursor:
  style: Block

shell:
  program: /bin/zsh
  args:
    - --login
    - -c
    - "tmux"

# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: false

mouse:
  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

# Regex hints
#
# Terminal hints can be used to find text in the visible part of the terminal
# and pipe it to other applications.
#hints:
  # Keys used for the hint labels.
  #alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  #
  # Each hint must have a `regex` and either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The fields `command`, `binding.key`, `binding.mods` and `mouse.mods` accept
  # the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  #enabled:
  # - regex: "(magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
  #           [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
  #   command: xdg-open
  #   post_processing: true
  #   mouse:
  #     enabled: true
  #     mods: None
  #   binding:
  #     key: U
  #     mods: Control|Shift
hints:
  alphabet: "jfkdls;ahgurieowpq"
  enabled:
   - regex: "(magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
             [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
     command: open
     post_processing: true
     mouse:
       enabled: true
       mods: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
key_bindings:
##CUSTOM BINDINGS##
  # (macOS only)
  - { key: Key0,   mods: Command,            action: ResetFontSize    }
  - { key: Equals, mods: Command,            action: IncreaseFontSize }
  - { key: Plus,   mods: Command,            action: IncreaseFontSize }
  - { key: Minus,  mods: Command,            action: DecreaseFontSize }


# (VIM)
  - { key: RBracket, mods: Shift|Command, chars: "\x1b[18;2~" } # VIM: nnoremap <S-F7> :tabnext<CR>
  - { key: LBracket, mods: Shift|Command, chars: "\x1b[17;2~" } # VIM: nnoremap <S-F6> :tabprevious<CR>

# (TMUX)
  - { key: A,      mods: Super,              chars: "\x1ba"           }
  - { key: H,      mods: Super,              chars: "\x1bh"           }
  - { key: J,      mods: Super,              chars: "\x1bj"           }
  - { key: K,      mods: Super,              chars: "\x1bk"           }
  - { key: L,      mods: Super,              chars: "\x1bl"           }
#  - { key: RWin,  chars: "\x1b" } # Meta for tmux
#  - { key: A, mods: Alt, chars: "\x1ba" }
#  - { key: H, mods: Alt, chars: "\x1bh" }
#  - { key: J, mods: Alt, chars: "\x1bj" }
#  - { key: K, mods: Alt, chars: "\x1bk" }
#  - { key: L, mods: Alt, chars: "\x1bl" }

debug:
  render_timer: false # Display the time it takes to redraw each frame.
  persistent_logging: true
  log_level: Warn
  print_events: false
